#pragma once

namespace rust_compiler::hir {

class Lifetime;
class LifetimeParam;
class PathInExpression;
class TypePathSegment;
class TypePathSegmentGeneric;
class TypePathSegmentFunction;
class AssignmentExpr;
class GroupedExpr;
class ArrayExpr;
class TupleExpr;
class ArrayIndexExpr;
class TupleIndexExpr;
class LazyBooleanExpr;
class TypeCastExpr;
class StructExprStruct;
class StructExprFieldIdentifier;
class StructExprFieldIdentifierValue;
class StructExprFieldIndexValue;
class CallExpr;
class StructExprStructBase;
class StructExprStructFields;
class MethodCallExpr;
class FieldAccessExpr;
class BlockExpr;
class ClosureExpr;
class RangeToExpr;
class RangeFromExpr;
class RangeFromToExpr;
class BreakExpr;
class ContinueExpr;
class RangeFromToExpr;
class RangeToInclExpr;
class RangeFromToInclExpr;
class LoopExpr;
class UnsafeBlockExpr;
class ReturnExpr;
class RangeFullExpr;
class IfExprConseqElse;
class IfExpr;
class ForLoopExpr;
class ArrayElemsCopied;
class ArrayElemsValues;
class IfExprConseqElse;
class IfLetExpr;
class IfExprConseqElse;
class ErrorPropagationExpr;
class DereferenceExpr;
class BorrowExpr;
class LiteralExpr;
class QualifiedPathInExpression;
class TypePath;
class IfLetExprConseqIf;
class IfLetExprConseqIfLet;
class MatchExpr;
class AwaitExpr;
class AsyncBlockExpr;
class ConstGenericParam;
class LifetimeWhereClauseItem;
class TypeBoundWhereClauseItem;
class Module;
class UseTreeList;
class UseTreeRebind;
class ExternCrate;
class UseTreeGlob;
class UseDeclaration;
class Function;
class TypeAlias;
class TupleStruct;
class EnumItem;
class EnumItemTuple;
class EnumItemStruct;
class StructStruct;
class EnumItemDiscriminant;
class Enum;
class Union;
class TypeParam;
class TraitItemFunc;
class TraitItemConst;
class Trait;
class ImplBlock;
class ConstantItem;
class StaticItem;
class ExternalStaticItem;
class ExternalFunctionItem;
class ExternBlock;
class LiteralPattern;
class TraitItemType;
class IdentifierPattern;
class WildcardPattern;
class RangePatternBoundLiteral;
class RangePatternBoundPath;
class RangePattern;
class ReferencePattern;
class StructPatternFieldTuplePat;
class StructPatternFieldIdentPat;
class StructPatternFieldIdent;
class StructPattern;
class TupleStructItemsNoRange;
class TupleStructPattern;
class TupleStructItemsRange;
class IfExprConseqIfLet;
class IfLetExprConseqIf;
class GroupedPattern;
class SlicePattern;
class TuplePattern;
class EmptyStmt;
class LetStmt;
class ExprStmtWithoutBlock;
class TuplePatternItemsMultiple;
class TraitObjectType;
class ExprStmtWithBlock;
class TupleType;
class TuplePatternItemsRanged;
class ImplTraitTypeOneBound;
class NeverType;
class RawPointerType;
class ReferenceType;
class TraitBound;
class BareFunctionType;
class InferredType;
class SliceType;
class ImplTraitType;
class ParenthesisedType;
class ArrayType;
class RangePatternBoundQualPath;
class QualifiedPathInType;
class IfLetExprConseqElse;
class WhileLoopExpr;
class WhileLetLoopExpr;
class IfExprConseqIf;
class CompoundAssignmentExpr;
class ComparisonExpr;
class NegationExpr;
class ArithmeticOrLogicalExpr;

} // namespace rust_compiler::hir
